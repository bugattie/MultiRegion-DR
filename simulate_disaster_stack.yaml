AWSTemplateFormatVersion: "2010-09-09"

Description: "CloudFormation template to simulate disaster in active region"

Metadata:
  Author: "Mohsin Sheikhani"

Parameters:
  RegionName:
    Type: String
    Description: The name of the region.
    Default: us-east-1

  BucketName:
    Type: String
    Description: The name of the bucket where the template resides.
    Default: multi-region-dr-template-bucket

  TemplateUrl:
    Type: String
    Description: Url of the restore template
    Default: https://multi-region-dr-template-bucket.s3.us-east-1.amazonaws.com/restore.yaml

Resources:
  APIGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${AWS::StackName}-SimulateDisasterApi"

  APIGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt APIGatewayRestApi.RootResourceId
      PathPart: "simulate-disaster"
      RestApiId: !Ref APIGatewayRestApi

  APIGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGatewayRestApi
      ResourceId: !Ref APIGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SimulateDisasterFunction.Arn}/invocations"

  APIGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - APIGatewayMethod
    Properties:
      RestApiId: !Ref APIGatewayRestApi
      StageName: "dev"

  LambdaPermissionForApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SimulateDisasterFunction
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGatewayRestApi}/*/POST/simulate-disaster"

  LambdaExecutionRoleToUpdateASG:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  LambdaExecutionRolePolicyToUpdateASG:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref LambdaExecutionRoleToUpdateASG
      PolicyName: LambdaExecutionRolePolicyToUpdateASG
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: LambdaExecutionRolePolicy
            Effect: Allow
            Action:
              - autoscaling:UpdateAutoScalingGroup
            Resource:
              - !ImportValue AutoScalingGroupArn
            Condition:
              StringEqualsIfExists:
                aws:SourceArn: !GetAtt SimulateDisasterFunction.Arn

  SimulateDisasterFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-SimulateDisaster"
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRoleToUpdateASG.Arn
      Runtime: python3.9
      Timeout: 300
      MemorySize: 128
      Environment:
        Variables:
          ASG_NAME: !ImportValue AutoScalingGroupName
          REGION_NAME: !Ref RegionName
      Code:
        ZipFile: |
          """
            This lambda function will simulate the disaster event by updating the ASG instance capacity to 0.
          """

          import boto3
          import os

          def lambda_handler(event, context):
              region = os.getenv('REGION_NAME')
              asg_client = boto3.client('autoscaling', region_name=region)
              asg_name = os.getenv('ASG_NAME')

              try:
                  asg_client.update_auto_scaling_group(
                      AutoScalingGroupName=asg_name,
                      MinSize=0,
                      DesiredCapacity=0
                  )

                  print(f"ASG '{asg_name}' reset: MinSize and DesiredCapacity set to 0.")
                  return {
                      'status': 'success',
                      'message': 'ASG reset successfully.'
                  }
              except Exception as error:
                  print(f"Error resetting ASG: {error}")
                  return {
                      'status': 'error',
                      'message': str(error)
                  }

  DetectDisasterAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: DetectDisasterAlarm
      AlarmDescription: Alarm to detect disaster
      Namespace: AWS/AutoScaling
      MetricName: GroupInServiceInstances
      ComparisonOperator: LessThanOrEqualToThreshold
      Threshold: 0
      EvaluationPeriods: 1
      Period: 60
      Statistic: Minimum
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !ImportValue AutoScalingGroupName
      AlarmActions:
        - !GetAtt RestoreInfrastructureFunction.Arn

  LambdaExecutionRoleRestoreInfrastructureFunction:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  LambdaExecutionPolicyToRestoreInfrastructure:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref LambdaExecutionRoleRestoreInfrastructureFunction
      PolicyName: LambdaExecutionPolicyToRestoreInfrastructure
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "cloudformation:CreateStack"
              - "cloudformation:DescribeStacks"
              - "cloudformation:UpdateStack"
              - "cloudformation:DeleteStack"
            Resource: !Sub "arn:aws:cloudformation:*:${AWS::AccountId}:stack/*"
          - Effect: Allow
            Action:
              - "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${BucketName}/*"
          - Effect: Allow
            Action:
              - "iam:PassRole"
            Resource: "*"

  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudFormationResourceCreationPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:*
                  - autoscaling:*
                  - elasticloadbalancing:*
                  - "rds:PromoteReadReplica"
                  - "rds:DescribeDBInstances"
                Resource: "*"

  RestoreInfrastructureFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-RestoreInfrastructure"
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRoleRestoreInfrastructureFunction.Arn
      Runtime: python3.9
      Timeout: 300
      MemorySize: 128
      Environment:
        Variables:
          TEMPLATE_URL: !Ref TemplateUrl
          ROLE_ARN: !GetAtt CloudFormationExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          import time

          cf_client = boto3.client("cloudformation")
          rds_client = boto3.client("rds")
          route53_client = boto3.client("route53")

          TEMPLATE_URL = os.getenv("TEMPLATE_URL")
          ROLE_ARN = os.getenv("ROLE_ARN")
          READ_REPLICA_IDENTIFIER = os.getenv("READ_REPLICA_IDENTIFIER")
          DNS_RECORD = os.getenv("DNS_RECORD")
          HOSTED_ZONE_ID = os.getenv("HOSTED_ZONE_ID")
          TARGET_REGION = os.getenv("TARGET_REGION", "us-east-2")

          def promote_read_replica():
              print(f"Promoting Read Replica: {READ_REPLICA_IDENTIFIER}")
              rds_client.promote_read_replica(DBInstanceIdentifier=READ_REPLICA_IDENTIFIER)

              # Wait until the instance is promoted
              while True:
                  response = rds_client.describe_db_instances(DBInstanceIdentifier=READ_REPLICA_IDENTIFIER)
                  status = response["DBInstances"][0]["DBInstanceStatus"]
                  print(f"Current status: {status}")
                  if status == "available":
                      print("Read Replica successfully promoted to primary.")
                      break
                  time.sleep(10)

          def update_route53(primary_endpoint):
              print(f"Updating Route53 record: {DNS_RECORD}")
              secondary_record = {
                  "Action": "UPSERT",
                  "ResourceRecordSet": {
                      "Name": DNS_RECORD,
                      "Type": "A",  # or "CNAME" depending on your setup
                      "SetIdentifier": "Secondary",
                      "Failover": "SECONDARY",
                      "TTL": 60,
                      "ResourceRecords": [{"Value": secondary_endpoint}],
                  },
              }

              route53_client.change_resource_record_sets(
                  HostedZoneId=HOSTED_ZONE_ID,
                  ChangeBatch={
                      "Comment": "Failover configuration for multi-region setup",
                      "Changes": [secondary_record],
                  },
              )
              print("Route53 record updated successfully.")

          def restore_infrastructure():
              print(f"Starting stack creation in {TARGET_REGION}...")
              response = cf_client.create_stack(
                  StackName="RestoreInfrastructure",
                  TemplateURL=TEMPLATE_URL,
                  Capabilities=["CAPABILITY_NAMED_IAM"],
                  RoleARN=ROLE_ARN
              )
              print(f"Stack creation initiated: {response}")
              return response

          def lambda_handler(event, context):
              try:
                  # Step 1: Restore infrastructure
                  restore_response = restore_infrastructure()
                  print(f"Infrastructure restore response: {restore_response}")

                  # Step 2: Promote the read replica
                  promote_read_replica()

                  # Step 3: Retrieve the new primary endpoint
                  response = rds_client.describe_db_instances(DBInstanceIdentifier=READ_REPLICA_IDENTIFIER)
                  primary_endpoint = response["DBInstances"][0]["Endpoint"]["Address"]
                  print(f"New primary endpoint: {primary_endpoint}")

                  # Step 4: Update Route53 DNS record
                  update_route53(primary_endpoint)

                  return {
                      "statusCode": 200,
                      "body": json.dumps({
                          "message": "Infrastructure restored and failover completed successfully."
                      })
                  }

              except Exception as e:
                  print(f"Error: {e}")
                  return {
                      "statusCode": 500,
                      "body": json.dumps({"error": str(e)})
                  }

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RestoreInfrastructureFunction
      Action: lambda:InvokeFunction
      Principal: lambda.alarms.cloudwatch.amazonaws.com
      SourceArn: !GetAtt DetectDisasterAlarm.Arn

Outputs:
  SimulateDisasterApiEndpoint:
    Description: "The endpoint of the Simulate Disaster API"
    Value: !Sub "https://${APIGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/dev/simulate-disaster"
